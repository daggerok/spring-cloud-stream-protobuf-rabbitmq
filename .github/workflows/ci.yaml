name: CI
on:
  workflow_dispatch:
    inputs:
      trigger:
        description: Type m to triggre manual jobs
        required: false
        default: ''
  pull_request:
    branches: [main, master, integration-services]
  push:
env:
  JAVA_VERSION: 1.8
jobs:
  tests:
    if: github.event.inputs.trigger == ''
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: ci
      with:
        path: |
          ~/.npm
          ~/.node
          ~/.local
          ~/.gradle
          ~/.docker
          ~/.m2/repository
          !~/.m2/repository/com/gituhb/daggerok
        key: ${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
    - uses: actions/setup-node@v2
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
    - run: cd $GITHUB_WORKSPACE ; ./mvnw # -B dependency:resolve dependency:resolve-plugins
  e2e-tests:
    if: github.event.inputs.trigger == ''
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: ci
      with:
        path: |
          ~/.npm
          ~/.node
          ~/.local
          ~/.gradle
          ~/.docker
          ~/.m2/repository
          !~/.m2/repository/com/gituhb/daggerok
        key: ${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
    - uses: actions/setup-node@v2
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
    - run: rm -rf ~/.m2/repository/microservices
    - run: ./mvnw clean install -DskipTests
    - run: ./mvnw -f rabbitmq docker:start
    - run: ./mvnw -f user-service spring-boot:start
    - run: ./mvnw -f user-backend -Pe2e test
    - run: ./mvnw -f user-service spring-boot:stop
    - run: ./mvnw -f rabbitmq docker:stop docker:remove
  manual-integration-tests:
    if: github.event.inputs.trigger == ''
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: ci
      with:
        path: |
          ~/.npm
          ~/.node
          ~/.local
          ~/.gradle
          ~/.docker
          ~/.m2/repository
          !~/.m2/repository/com/gituhb/daggerok
        key: ${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
    - uses: actions/setup-node@v2
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
    - run: rm -rf ~/.m2/repository/microservices
    - run: ./mvnw clean install -DskipTests
    - run: ./mvnw -f rabbitmq docker:start
    - run: ./mvnw -f user-service spring-boot:start
    - run: ./mvnw -f user-backend spring-boot:start
    - run: curl -sSv 0:8001/api/v1/users -H'Content-Type:application/json' -d'{"username":"maksimko"}'
    - run: curl -sSv 0:8001
    - run: ./mvnw -f user-backend spring-boot:stop
    - run: ./mvnw -f user-service spring-boot:stop
    - run: ./mvnw -f rabbitmq docker:stop docker:remove
  dependency-updates:
    if: contains(github.event.inputs.trigger, 'M')
      || startsWith(github.event.inputs.trigger, 'm')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - run: |
        echo "Trigger: ${{ github.event.inputs.trigger }}"
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      id: ci
      with:
        path: |
          ~/.npm
          ~/.node
          ~/.local
          ~/.gradle
          ~/.docker
          ~/.m2/repository
          !~/.m2/repository/com/gituhb/daggerok
        key: ${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
    - uses: actions/setup-java@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
    - run: cd $GITHUB_WORKSPACE ; ./mvnw versions:display-plugin-updates
    - run: cd $GITHUB_WORKSPACE ; ./mvnw versions:display-property-updates
    - run: cd $GITHUB_WORKSPACE ; ./mvnw versions:display-parent-updates
